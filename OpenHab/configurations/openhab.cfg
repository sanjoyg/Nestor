#######################################################################################
#####                        General configurations                               #####
#######################################################################################

# Configuration folders (must exist as a subdirectory of "configurations"; the value
# tells the number of seconds for the next scan of the directory for changes. A
# value of -1 deactivates the scan).
# A comma separated list can follow after the refresh value. This list defines a filter
# for valid file extensions for the models.
folder:items=10,items
folder:sitemaps=10,sitemap
folder:rules=10,rules
folder:scripts=10,script
folder:persistence=10,persist

# configures the security options. The following values are valid:
# ON = security is switched on generally
# OFF = security is switched off generally
# EXTERNAL = security is switched on for external requests
#            (e.g. originating from the Internet) only
# (optional, defaults to 'OFF')
security:option=EXTERNAL

# the Netmask to define a range of internal IP-Addresses which doesn't require
# authorization (optional, defaults to '192.168.1.0/24')
security:netmask=192.168.1.0/24

# The name of the default persistence service to use
persistence:default=rrd4j

# The refresh interval for the main configuration file. A value of '-1'
# deactivates the scan (optional, defaults to '-1' hence scanning is deactivated)
#mainconfig:refresh=

# Bind service discovery to specific hostname or IP address
#servicediscovery:bind_address=127.0.0.1

################################## Chart Servlet ######################################
#
# This section defines the configuration for the chart servlet.
chart:provider=default

#
# Set the default height of a chart if the client doesn't provide this in the request
# defaults to 240
#chart:defaultHeight=240

#
# Set the default width of a chart if the client doesn't provide this in the request
# defaults to 480
#chart:defaultWidth=480

#
# Set a scale factor. This is used if the client sets the size in the request.
# defaults to 1 (ie no scaling)
#chart:scale=1


#######################################################################################
#####                       Action configurations                                 #####
#######################################################################################

######################## Mail Action configuration ####################################
#
# The SMTP server hostname, e.g. "smtp.gmail.com"
#mail:hostname=

# the SMTP port to use (optional, defaults to 25 (resp. 587 for TLS))
#mail:port=

# the username and password if the SMTP server requires authentication
#mail:username=
#mail:password=

# The email address to use for sending mails
#mail:from=

# set to "true", if TLS should be used for the connection
# (optional, defaults to false)
#mail:tls=

# set to "true", if POP before SMTP (another authentication mechanism)
# should be enabled. Username and Password are taken from the above
# configuration (optional, default to false)
#mail:popbeforesmtp=

# Character set used to encode message body
# (optional, if not provided platform default is used)
#mail:charset=

########################### Twitter Action configuration ##############################
#
# The ConsumerKey, ConsumerSecret combination (optional, defaults to official Twitter-App
# Key-Secret-Combination)
#twitter:key=
#twitter:secret=

# Flag to enable/disable the Twitter client (optional, defaults to 'false')
twitter:enabled=false

#################### Notify my Android (NMA) Action configuration #####################
#
# The timeout for the communication with the NMA service (optional, defaults
# to 10000 milliseconds)
#nma:timeout=

# If you have a developerKey from NMA you can set it here, but this completely optional
#nma:developerKey=

# The default api key to send messages to. Api keys can be created in your accounts dashboard.
#nma:apiKey=

# The application name which NMA will show (optional, defaults to 'openHAB').
#nma:appName=

# The priority to use for messages if not specified otherwise. Can range from
# -2 (lowest) to 2 (highest)
#nma:defaultPriority=

# The URL to attach to NMA messages by default  if not specified otherwise. Can be left empty.
#nma:defaultUrl=

#######################################################################################
#####                   I/O component configurations                              #####
#######################################################################################

########################## Google Calendar configuration ##############################
#
# the username and password for Google Calendar Account
#gcal:username=
#gcal:password=

# the url of the calendar feed
#gcal:url=

# the filter criteria for full text query (optional)
#gcal:filter=

# refresh interval in milliseconds (optional, defaults to 900000 [15 minutes])
#gcal:refresh=

############################# MaryTTS configuration ###################################
#
# the default voice used by the MaryTTS engine. Available voices are: bits1-hsmm
# (german, female), bits3-hsmm (german, male), cmu-slt-hsmm (english, male) (optional,
# defaults to the systems' default voice or the first available voice)
#marytts:voice=

###################### Speech-Dispatcher TTS configuration ############################
#
# Hostname or ip of the first Speech Dispatcher device to control
# speechdispatcher:<SDId1>.host=
# Port of the Speech Dispatcher to control (optional, defaults to 6560)
# speechdispatcher:<SDId1>.port=6560

###################### GoogleTTS configuration ############################
#
# The language to be used by the GoogleTTS engine (optional, default: 'en').
# Language must be supported for audio output by https://translate.google.com.
# googletts:language=en
# Sentence delimiters used to split text into sentences (optional, default: !.?:;)
# googletts:sentenceDelimiters=
# Google Translate URL to be used for converting text to speech (optional,
# defaults to http://translate.google.com/translate_tts?tl=%s&q=%s&client=t).
# googletts:translateUrl=

#######################################################################################
#####                      Persistence configurations                             #####
#######################################################################################

########################### RRD4J Persistence Service #################################
#
# please note that currently the first archive in each RRD defines the consolidation
# function (e.g. AVERAGE) used by OpenHAB, thus only one consolidation function is
# fully supported
#
# default_numeric and default_other are internally defined defnames and are used as
# defaults when no other defname applies

#rrd4j:<defname>.def=[ABSOLUTE|COUNTER|DERIVE|GAUGE],<heartbeat>,[<min>|U],[<max>|U],<step>
#rrd4j:<defname>.archives=[AVERAGE|MIN|MAX|LAST|FIRST|TOTAL],<xff>,<steps>,<rows>
#rrd4j:<defname>.items=<list of items for this defname>
#rrd4j:GFWaterLevelDB.def=GAUGE,5,U,U,1
#rrd4j:GFWaterLevelDB.archives=AVERAGE,0.5,3600,8
#rrd4j:GFWaterLevelDB.items=gfWaterLevelRaw

######################## Open.Sen.se Persistence Service ##############################
#
# the url of the Open.Sen.se public api (optional, defaults to
# 'http://api.sen.se/events/?sense_key=')
#sense:url=

# the Open.Sen.se API-Key for authentication (generated on the Open.Sen.se website)
#sense:apikey=

######################### Logging Persistence Service #################################
#
# the logback encoder pattern to use to write log entries
# see http://logback.qos.ch/manual/layouts.html#ClassicPatternLayout for all options
# the item name is available as the "logger" name, the state as the "msg"
logging:pattern=%date{ISO8601} - %-25logger: %msg%n

########################### Db4o Persistence Service ##################################
#
# the backup interval as Cron-Expression (optional, defaults to '0 0 1 * * ?'
# which means every morning at 1 o'clock)
#db4o:backupinterval=

# the commit interval in seconds (optional, default to '5')
#db4o:commitinterval=

# the amount of backup files allowed in DB_FOLDER_NAME (optional, defaults
# to '7')
#db4o:maxbackups=

############################ SQL Persistence Service ##################################
# the database url like 'jdbc:mysql://<host>:<port>/<database>' (without quotes)
#mysql:url=

# the database user
#mysql:user=

# the database password
#mysql:password=

# the reconnection counter
#mysql:reconnectCnt=

# the connection timeout (in seconds)
#mysql:waitTimeout=

############################ Cosm Persistence Service #################################
#
# the url of the Cosm feed (optional, defaults to 'http://api.cosm.com/v2/feeds/')
#cosm:url=

# the Cosm API-Key for authentication (generated on the Cosm website)
#cosm:apikey=

############################ InfluxDB Persistence Service #############################
#
# The database URL, e.g. http://127.0.0.1:8086 or https://127.0.0.1:8084 .
# Defaults to: http://127.0.0.1:8086
# influxdb:url=http(s)://<host>:<port>

# The name of the database user, e.g. openhab.
# Defaults to: openhab
# influxdb:user=<user>

# The password of the database user.
# influxdb:password=

# The name of the database, e.g. openhab.
# Defaults to: openhab
# influxdb:db=<database>

#######################################################################################
#####                       Transport configurations                              #####
#######################################################################################

################################# MQTT Transport ######################################
#
# Define your MQTT broker connections here for use in the MQTT Binding or MQTT
# Persistence bundles. Replace <broker> with a id you choose.
#

# URL to the MQTT broker, e.g. tcp://localhost:1883 or ssl://localhost:8883
#mqtt:mosquitto.url=tcp://localhost:1883
mqtt:mosquitto.url=tcp://192.168.1.10:1883

# Optional. Client id (max 23 chars) to use when connecting to the broker.
# If not provided a default one is generated.
mqtt:<broker>.clientId=openhab

# Optional. User id to authenticate with the broker.
# mqtt:<broker>.user=<user>

# Optional. Password to authenticate with the broker.
#mqtt:<broker>.pwd=<password>

# Optional. Set the quality of service level for sending messages to this broker.
# Possible values are 0 (Deliver at most once),1 (Deliver at least once) or 2
# (Deliver exactly once). Defaults to 0.
mqtt:mosquitto.qos=2

# Optional. True or false. Defines if the broker should retain the messages sent to
# it. Defaults to false.
mqtt:mosquitto.retain=false

# Optional. True or false. Defines if messages are published asynchronously or
# synchronously. Defaults to true.
#mqtt:<broker>.async=<async>

# Optional. Defines the last will and testament that is sent when this client goes offline
# Format: topic:message:qos:retained <br/>
#mqtt:<broker>.lwt=<last will definition>



#######################################################################################
#####                        Binding configurations                               #####
#######################################################################################


############################## OneWire Binding ########################################
#
# OwServer IP address
#onewire:ip=

# OwServer Port (optional, defaults to 4304)
#onewire:port=

# the retry count in case no valid value was returned
# upon read (optional, defaults to 3)
#onewire:retry=

# defines which temperature scale owserver should return temperatures in. Valid
# values are CELSIUS, FAHRENHEIT, KELVIN, RANKINE (optional, defaults to CELSIUS).
#onewire:tempscale=

# only changed values are posted to the event-bus, (optinal, defaults to true - values true or false)
#onewire:post_only_changed_values=

########################### NetworkHealth Binding #####################################
#
# Default timeout in milliseconds if none is specified in binding configuration
# (optional, default to 5000)
networkhealth:timeout=5000

# refresh interval in milliseconds (optional, default to 60000)
#networkhealth:refresh=

# Cache the state for n minutes so only changes are posted (optional, defaults to 0 = disabled)
# Example: if period is 60, once per hour the online states are posted to the event bus;
#          changes are always and immediately posted to the event bus.
# The recommended value is 60 minutes.
#networkhealth:cachePeriod=60

############################### HTTP Binding ##########################################
#
# timeout in milliseconds for the http requests (optional, defaults to 5000)
#http:timeout=

# the interval in milliseconds when to find new refresh candidates
# (optional, defaults to 1000)
#http:granularity=

# configuration of the first cache item
# http:<id1>.url=
# http:<id1>.updateInterval=

# configuration of the second cache item
# http:<id2>.url=
# http:<id2>.updateInterval=

################################ NTP Binding ##########################################
#
# refresh interval in milliseconds (optional, defaults to 900000 [15 minutes])
#ntp:refresh=

# the hostname of the timeserver
ntp:hostname=time.nist.gov

################################ SNMP Binding #########################################
#
# Listening Port (optional, defaults to '162')
#snmp:port=

# The SNMP community to listen to (optional, defaults to 'public')
#snmp:community=

# The SNMP retry timeout (in milliseconds). Defaults to 1500.
# Sets the number of milliseconds between retries.
#snmp:timeout=

# The SNMP number of retries. Defaults to 0.
# Sets the number of retries before aborting the request.
#snmp:retries=

############################### Philips Hue Binding ###################################
#
# IP address of Hue Bridge (optional, default is auto-discovery)
#hue:ip=

# Default secret key for the pairing of the Philips Hue Bridge.
# It has to be between 10-40 (alphanumeric) characters
# This may be changed by the user for security reasons.
hue:secret=openHABRuntime

# Polling interval in msec to retrieve Philips bulb status.
# Other apps can change Hue status or a physical switch can turn on / off lamp status.
# If this happens the status of hue lamps within OpenHAB won't reflect the real status.
# Currently (September 2014) there is no push technology available, so the only option is
# to poll Philips bulbs to retrieve status and update items accordingly to reflect changes.
# Polling is enabled if refresh is specified, by commenting out "hue:refresh=10000" statement.
# Be aware that polling will consume resources, so a small refresh interval will increase cpu load.
# hue:refresh=10000


################################ Sonos Binding ########################################
#
#Add a line for each Sonos device you want to pre-define
#The format is <name>.udn=<RINCON UID>
#
#sonos:office.udn=RINCON_000XXXXXXXXX01400
#sonos:living.udn=RINCON_000YYYYYYYYY01400
#
#Interval, in milliseconds, to poll the Sonos devices for status variables
#sonos:pollingPeriod=1000

################################ SAMSUNG TV Binding ###################################
#
# Host of the first TV to control
# samsungtv:<TVid1>.host=
# Port of the TV to control (optional, defaults to 55000)
# samsungtv:<TVid1>.port=

# Host of the second TV to control
# samsungtv:<TVid2>.host=
# Port of the TV to control (optional, defaults to 55000)
# samsungtv:<TVid2>.port=

################################# Onkyo  Binding ######################################
#
# Host of the first Onkyo device to control
# onkyo:<OnkyoId1>.host=
# Port of the Onkyo to control (optional, defaults to 60128)
# onkyo:<OnkyoId1>.port=

# Host of the second Onkyo device to control
# onkyo:<OnkyoId2>.host=
# Port of the Onkyo to control (optional, defaults to 60128)
# onkyo:<OnkyoId2>.port=

# TTS URL to use for generating text-to-speech voice announcements
# the URL should contain one '%s' parameter which will be substituted
# with the text to be translated (new as of openHAB 1.8)
# (defaults to Google TTS service using the URL below)
#    http://translate.google.com/translate_tts?tl=en&ie=UTF-8&client=openhab&q=%s)
# (another TTS service is http://www.voicerss.org/api/ which requires an API key)
#    https://api.voicerss.org/?key=YOURAPIKEYHERE&hl=en-gb&src=%s
#squeeze:ttsurl=

# Maximum TTS sentence length - for example the Google TTS service only
# permits up to 100 chars - the Squeezebox speak action will break long
# strings into sentence chunks call the TTS service repeatedly
# (defaults to 100)
#squeeze:ttsmaxsentencelength=

# Id (MAC address) of your first Squeezebox.  MAC addresses of players are case-sensitive. 
# Use small letters (a-f) if the address contains them. Example:
# squeeze:Kitchen.id=de:ad:be:ef:12:34
#squeeze:<boxId1>.id=

# Id (MAC address) of your nth Squeezebox
#squeeze:<boxIdN>.id=


############################### Systeminfo Binding ####################################
#
# Interval in milliseconds when to find new refresh candidates
# (optional, defaults to 1000)
#systeminfo:granularity=

# Data Storage Unit, where B=Bytes, K=kB, M=MB, T=TB (optional, defaults to M)
#systeminfo:units=

################################### PiFace Binding ####################################
#
# Watchdog polling interval (optional, defaults to 60000)
#piface:watchdog.interval=

# Host of the first Raspberry PI carrying a PiFace board
#piface:<piface-id1>.host=
# Port of the Piface listener of the first RasPi (optional, defaults to 15432)
#piface:<piface-id1>.listenerport=
# Port of the Piface monitor of the first RasPi (optional, defaults to 15433)
#piface:<piface-id1>.monitorport=
# Socket timeout when sending packets to the first RasPi (optional, defaults to 1000ms)
#piface:<piface-id1>.sockettimeout=
# Number of retry attempts before failing a packet for the first RasPi (optional, defaults to 3)
#piface:<piface-id1>.maxretries=



################################# TCP - UDP Binding ###################################
#
# all parameters can be applied to both the TCP and UDP binding unless
# specified otherwise

# Port to listen for incoming connections
#tcp:port=25001

# Cron-like string to reconnect remote ends, e.g for unstable connection or remote ends
#tcp:reconnectcron=0 0 0 * * ?

# Interval between reconnection attempts when recovering from a communication error,
# in seconds
#tcp:retryinterval=5

# Queue data whilst recovering from a connection problem (TCP only)
#tcp:queue=true

# Maximum buffer size whilst reading incoming data
#tcp:buffersize=1024

# Share connections within the Item binding configurations
#tcp:itemsharedconnections=true

# Share connections between Item binding configurations
#tcp:bindingsharedconnections=true

# Share connections between inbound and outbound connections
#tcp:directionssharedconnections=false

# Allow masks in ip:port addressing, e.g. 192.168.0.1:* etc
#tcp:addressmask=true

# Pre-amble that will be put in front of data being sent
#tcp:preamble=

# Post-amble that will be appended to data being sent
#tcp:postamble=\r\n

# Perform all write/read (send/receive) operations in a blocking mode, e.g. the binding
# will wait for a reply from the remote end after data has been sent
#tcp:blocking=false

# timeout, in milliseconds, to wait for a reply when initiating a blocking write/read
#  operation
#tcp:timeout=3000

# Update the status of Items using the response received from the remote end (if the
# remote end sends replies to commands)
#tcp:updatewithresponse=true

# Timeout - or 'refresh interval', in milliseconds, of the worker thread
tcp:refreshinterval=250

# Timeout, in milliseconds, to wait when "Selecting" IO channels ready for communication
#tcp:selecttimeout=1000

# Used character set
#tcp:charset=ASCII


############################### OpenPaths Binding #####################################
#
# The latitude/longitude coordinates of 'home'.
#openpaths:home.lat=
#openpaths:home.long=
#openpaths:home.geofence=

# You may define any number of additional locations. If no geofence is given
# for a location, the default geofence configuration below is used

# The latitude/longitude coordinates of 'work'.
#openpaths:work.lat=
#openpaths:work.long=
#openpaths:work.geofence=

# The latitude/longitude coordinates of 'anyplace'.
#openpaths:anyplace.lat=
#openpaths:anyplace.long=
#openpaths:anyplace.geofence=

# Interval in milliseconds to poll for user location (optional, defaults to 5mins).
#openpaths:refresh=

# Distance in metres a user must be from 'home' to be considered inside the
# geofence (optional, defaults to 100m).
#openpaths:geofence=

# OpenPaths access/secret keys for each user.
#openpaths:<name>.accesskey=<accesskey>
#openpaths:<name>.secretkey=<secretkey>


################################### GPIO Binding ######################################

# Optional directory path where "sysfs" pseudo file system is mounted, when isn't
# specified it will be determined automatically if "procfs" is mounted
#gpio:sysfs=/sys

# Optional time interval in miliseconds when pin interrupts are ignored to
# prevent bounce effect, mainly on buttons. Global option for all pins, can be
# overwritten per pin in item configuration. Default value if omitted: 0
#gpio:debounce=10

# Boolean controlling whether already exported pin should be forcibly taken under
# control of openHAB. Usefull after unclean shutdown. May cause serios issue if
# other software/system is also controlling GPIO and there is a configuration
# mistake for pin name/number. Default value if omitted: false.
#gpio:force=true



################################## LgTV  Binding ######################################
#
# The ip address of the lgtv
#lgtv:<lgtvId1>.host=

# The TCP port address to use
#lgtv:<lgtvId1>.port=

# The the pairkey / if it's wrong the device shows the right pairkey
# at every connection attempt
#lgtv:<lgtvId1>.pairkey=

# The TCP port address of the openhab system to receive lgtv status messages
# (only first occurance is used for all tvs)
#lgtv:<lgtvId1>.serverport=

# The location to put xml files with the information of availiable
# channels and apps (optional)
#lgtv:<lgtvId1>.xmldatafiles=./

# The check alive interval (optional, defaults to 60secs)
#lgtv:<lgtvId1>.checkalive=

################################### Weather Binding ###################################
#
# The apikey values for the different weather providers
# Note: Hamweather requires two apikeys: client_id=apikey, client_secret=apikey2
#weather:apikey.ForecastIo=
#weather:apikey.OpenWeatherMap=
#weather:apikey.WorldWeatherOnline=
#weather:apikey.Wunderground=
#weather:apikey.Hamweather=
#weather:apikey2.Hamweather=

# location configuration, you can specify multiple locations
# Note: latitude and longitude are NOT required for Yahoo
#       woeid is ONLY required for Yahoo
#weather:location.<locationId1>.name=
#weather:location.<locationId1>.latitude=
#weather:location.<locationId1>.longitude=
#weather:location.<locationId1>.woeid=
#weather:location.<locationId1>.provider=
#weather:location.<locationId1>.language=
#weather:location.<locationId1>.updateInterval=

#weather:location.<locationId2>.name=
#weather:location.<locationId2>.latitude=
#weather:location.<locationId2>.longitude=
#weather:location.<locationId2>.woeid=
#weather:location.<locationId2>.provider=
#weather:location.<locationId2>.language=
#weather:location.<locationId2>.updateInterval=

############################## Nest binding ###########################################
#
# Data refresh interval in ms (optional, defaults to 60000)
#nest:refresh=

# HTTP request timeout in ms (optional, defaults to 10000)
#nest:timeout=

# the Nest Client ID needed to use the API, must be supplied
#nest:client_id=

# the Nest Client Secret needed to use the API, must be supplied
#nest:client_secret=

# the PIN code that Nest presented when you authorized the above client, must be supplied
#nest:pin_code=



################################ Ecobee Binding #######################################
#
# the private API key issued be Ecobee to use the API (required, replace with your own)
#ecobee:appkey=9T4huoUXlT5b5qNpEJvM5sqTMgaNCFoV

# the application scope used when authorizing the binding
# choices are smartWrite,smartRead, or ems, or multiple (required, comma-separated, no spaces)
#ecobee:scope=smartWrite

# Rate at which to check if poll is to run, in ms (optional, defaults to 5000)
#ecobee:granularity=5000

# Data refresh interval in ms (optional, defaults to 180000)
#ecobee:refresh=180000

# Time in ms to wait after successful update, command or action before refresh (optional, defaults to 6000)
#ecobee:quickpoll=6000

# Time in ms to allow an API request to complete (optional, defaults to 20000)
#ecobee:timeout=20000

# the temperature scale to use when sending or receiving temperatures
# optional, defaults to Fahrenheit (F)
#ecobee:tempscale=C

################################ Panasonic TV Binding #######################################
#
# IP address of a Panasonic TV instance
# panasonictv:<id>=

############################### IPX800 Binding ###################################
#
# The ipx800 must be configured with 'Send data on status changed' activated in M2M > TCP client
# Please setup here ip address, port and extensions.
# See documentation to know how to setup items

# Ip or hostname of ipx800
#ipx800:<name>.host=<ip or hostname>

# Tcp client connection port (optional, default to 9870)
#ipx800:<name>.port=

# Extension setup
# This step is needed to declare extensions and give them alias
# Two types of extensions are supported : x880, x400

# Ex: this declare a x880 extension connected to ipx <name> on the first address using alias <alias>
#ipx800:<name>.x880.1=<alias>
# Ex: this declare a x400 extension connected to ipx <name> on the second address using alias <alias>
#ipx800:<name>.x400.2=<alias>


######################## Telegram Action configuration ####################################
#
# Telegram bots data
#
# telegram:bots=bot1,bot2
# telegram:bot1.chatId=22334455
# telegram:bot1.token=xxxxxx
# telegram:bot2.chatId=654321
# telegram:bot2.token=yyyyyyyyyyy

############################ SiteWhere Persistence Service #############################
#
# Unique hardware id of device that will receive events.
# sitewhere:defaultHardwareId=123-OPENHAB-777908324
#
# Device specification token used if device is not already registered.
# sitewhere:specificationToken=5a95f3f2-96f0-47f9-b98d-f5c081d01948
#
# MQTT broker hostname SiteWhere is listening to.
# sitewhere:mqttHost=localhost
#
# MQTT broker port SiteWhere is listening to.
# sitewhere:mqttPort=1883